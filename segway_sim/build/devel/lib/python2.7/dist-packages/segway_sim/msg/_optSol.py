# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from segway_sim/optSol.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class optSol(genpy.Message):
  _md5sum = "1db70613ce4d87aefb825b3827121e15"
  _type = "segway_sim/optSol"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 status
Header header
float64 time
float64[367] optimalSolution
float64 solverFlag
float64 solverTime
float64 x
float64 y
float64[7] xCurr
float64[7] x_IC
float64 delay_ms
float64 contPlan
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['status','header','time','optimalSolution','solverFlag','solverTime','x','y','xCurr','x_IC','delay_ms','contPlan']
  _slot_types = ['uint8','std_msgs/Header','float64','float64[367]','float64','float64','float64','float64','float64[7]','float64[7]','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       status,header,time,optimalSolution,solverFlag,solverTime,x,y,xCurr,x_IC,delay_ms,contPlan

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(optSol, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.status is None:
        self.status = 0
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.time is None:
        self.time = 0.
      if self.optimalSolution is None:
        self.optimalSolution = [0.] * 367
      if self.solverFlag is None:
        self.solverFlag = 0.
      if self.solverTime is None:
        self.solverTime = 0.
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.xCurr is None:
        self.xCurr = [0.] * 7
      if self.x_IC is None:
        self.x_IC = [0.] * 7
      if self.delay_ms is None:
        self.delay_ms = 0.
      if self.contPlan is None:
        self.contPlan = 0.
    else:
      self.status = 0
      self.header = std_msgs.msg.Header()
      self.time = 0.
      self.optimalSolution = [0.] * 367
      self.solverFlag = 0.
      self.solverTime = 0.
      self.x = 0.
      self.y = 0.
      self.xCurr = [0.] * 7
      self.x_IC = [0.] * 7
      self.delay_ms = 0.
      self.contPlan = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B3I().pack(_x.status, _x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.time
      buff.write(_get_struct_d().pack(_x))
      buff.write(_get_struct_367d().pack(*self.optimalSolution))
      _x = self
      buff.write(_get_struct_4d().pack(_x.solverFlag, _x.solverTime, _x.x, _x.y))
      buff.write(_get_struct_7d().pack(*self.xCurr))
      buff.write(_get_struct_7d().pack(*self.x_IC))
      _x = self
      buff.write(_get_struct_2d().pack(_x.delay_ms, _x.contPlan))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 13
      (_x.status, _x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 8
      (self.time,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 2936
      self.optimalSolution = _get_struct_367d().unpack(str[start:end])
      _x = self
      start = end
      end += 32
      (_x.solverFlag, _x.solverTime, _x.x, _x.y,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 56
      self.xCurr = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.x_IC = _get_struct_7d().unpack(str[start:end])
      _x = self
      start = end
      end += 16
      (_x.delay_ms, _x.contPlan,) = _get_struct_2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B3I().pack(_x.status, _x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.time
      buff.write(_get_struct_d().pack(_x))
      buff.write(self.optimalSolution.tostring())
      _x = self
      buff.write(_get_struct_4d().pack(_x.solverFlag, _x.solverTime, _x.x, _x.y))
      buff.write(self.xCurr.tostring())
      buff.write(self.x_IC.tostring())
      _x = self
      buff.write(_get_struct_2d().pack(_x.delay_ms, _x.contPlan))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 13
      (_x.status, _x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 8
      (self.time,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 2936
      self.optimalSolution = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=367)
      _x = self
      start = end
      end += 32
      (_x.solverFlag, _x.solverTime, _x.x, _x.y,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 56
      self.xCurr = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.x_IC = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      _x = self
      start = end
      end += 16
      (_x.delay_ms, _x.contPlan,) = _get_struct_2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_367d = None
def _get_struct_367d():
    global _struct_367d
    if _struct_367d is None:
        _struct_367d = struct.Struct("<367d")
    return _struct_367d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_B3I = None
def _get_struct_B3I():
    global _struct_B3I
    if _struct_B3I is None:
        _struct_B3I = struct.Struct("<B3I")
    return _struct_B3I
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
