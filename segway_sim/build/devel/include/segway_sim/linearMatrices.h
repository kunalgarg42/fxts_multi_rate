// Generated by gencpp from file segway_sim/linearMatrices.msg
// DO NOT EDIT!


#ifndef SEGWAY_SIM_MESSAGE_LINEARMATRICES_H
#define SEGWAY_SIM_MESSAGE_LINEARMATRICES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace segway_sim
{
template <class ContainerAllocator>
struct linearMatrices_
{
  typedef linearMatrices_<ContainerAllocator> Type;

  linearMatrices_()
    : status(0)
    , header()
    , Alinear()
    , Blinear()
    , Clinear()  {
      Alinear.assign(0.0);

      Blinear.assign(0.0);

      Clinear.assign(0.0);
  }
  linearMatrices_(const ContainerAllocator& _alloc)
    : status(0)
    , header(_alloc)
    , Alinear()
    , Blinear()
    , Clinear()  {
  (void)_alloc;
      Alinear.assign(0.0);

      Blinear.assign(0.0);

      Clinear.assign(0.0);
  }



   typedef uint8_t _status_type;
  _status_type status;

   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array<double, 49>  _Alinear_type;
  _Alinear_type Alinear;

   typedef boost::array<double, 14>  _Blinear_type;
  _Blinear_type Blinear;

   typedef boost::array<double, 7>  _Clinear_type;
  _Clinear_type Clinear;





  typedef boost::shared_ptr< ::segway_sim::linearMatrices_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::segway_sim::linearMatrices_<ContainerAllocator> const> ConstPtr;

}; // struct linearMatrices_

typedef ::segway_sim::linearMatrices_<std::allocator<void> > linearMatrices;

typedef boost::shared_ptr< ::segway_sim::linearMatrices > linearMatricesPtr;
typedef boost::shared_ptr< ::segway_sim::linearMatrices const> linearMatricesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::segway_sim::linearMatrices_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::segway_sim::linearMatrices_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::segway_sim::linearMatrices_<ContainerAllocator1> & lhs, const ::segway_sim::linearMatrices_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.header == rhs.header &&
    lhs.Alinear == rhs.Alinear &&
    lhs.Blinear == rhs.Blinear &&
    lhs.Clinear == rhs.Clinear;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::segway_sim::linearMatrices_<ContainerAllocator1> & lhs, const ::segway_sim::linearMatrices_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace segway_sim

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::segway_sim::linearMatrices_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::segway_sim::linearMatrices_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_sim::linearMatrices_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_sim::linearMatrices_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_sim::linearMatrices_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_sim::linearMatrices_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::segway_sim::linearMatrices_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad477ebebaec390b562aab51cae5a720";
  }

  static const char* value(const ::segway_sim::linearMatrices_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xad477ebebaec390bULL;
  static const uint64_t static_value2 = 0x562aab51cae5a720ULL;
};

template<class ContainerAllocator>
struct DataType< ::segway_sim::linearMatrices_<ContainerAllocator> >
{
  static const char* value()
  {
    return "segway_sim/linearMatrices";
  }

  static const char* value(const ::segway_sim::linearMatrices_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::segway_sim::linearMatrices_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 status\n"
"Header header\n"
"float64[49] Alinear\n"
"float64[14] Blinear\n"
"float64[7] Clinear\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::segway_sim::linearMatrices_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::segway_sim::linearMatrices_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.header);
      stream.next(m.Alinear);
      stream.next(m.Blinear);
      stream.next(m.Clinear);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct linearMatrices_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::segway_sim::linearMatrices_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::segway_sim::linearMatrices_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "Alinear[]" << std::endl;
    for (size_t i = 0; i < v.Alinear.size(); ++i)
    {
      s << indent << "  Alinear[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Alinear[i]);
    }
    s << indent << "Blinear[]" << std::endl;
    for (size_t i = 0; i < v.Blinear.size(); ++i)
    {
      s << indent << "  Blinear[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Blinear[i]);
    }
    s << indent << "Clinear[]" << std::endl;
    for (size_t i = 0; i < v.Clinear.size(); ++i)
    {
      s << indent << "  Clinear[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Clinear[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEGWAY_SIM_MESSAGE_LINEARMATRICES_H
