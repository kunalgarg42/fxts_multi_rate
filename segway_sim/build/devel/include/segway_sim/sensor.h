// Generated by gencpp from file segway_sim/sensor.msg
// DO NOT EDIT!


#ifndef SEGWAY_SIM_MESSAGE_SENSOR_H
#define SEGWAY_SIM_MESSAGE_SENSOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace segway_sim
{
template <class ContainerAllocator>
struct sensor_
{
  typedef sensor_<ContainerAllocator> Type;

  sensor_()
    : time(0)
    , data()  {
    }
  sensor_(const ContainerAllocator& _alloc)
    : time(0)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _time_type;
  _time_type time;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::segway_sim::sensor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::segway_sim::sensor_<ContainerAllocator> const> ConstPtr;

}; // struct sensor_

typedef ::segway_sim::sensor_<std::allocator<void> > sensor;

typedef boost::shared_ptr< ::segway_sim::sensor > sensorPtr;
typedef boost::shared_ptr< ::segway_sim::sensor const> sensorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::segway_sim::sensor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::segway_sim::sensor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::segway_sim::sensor_<ContainerAllocator1> & lhs, const ::segway_sim::sensor_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::segway_sim::sensor_<ContainerAllocator1> & lhs, const ::segway_sim::sensor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace segway_sim

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::segway_sim::sensor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::segway_sim::sensor_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_sim::sensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_sim::sensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_sim::sensor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_sim::sensor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::segway_sim::sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3c60d7e63896fdb67b75aaa2a7d209f7";
  }

  static const char* value(const ::segway_sim::sensor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3c60d7e63896fdb6ULL;
  static const uint64_t static_value2 = 0x7b75aaa2a7d209f7ULL;
};

template<class ContainerAllocator>
struct DataType< ::segway_sim::sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "segway_sim/sensor";
  }

  static const char* value(const ::segway_sim::sensor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::segway_sim::sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 time\n"
"float32[] data\n"
;
  }

  static const char* value(const ::segway_sim::sensor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::segway_sim::sensor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sensor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::segway_sim::sensor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::segway_sim::sensor_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.time);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEGWAY_SIM_MESSAGE_SENSOR_H
