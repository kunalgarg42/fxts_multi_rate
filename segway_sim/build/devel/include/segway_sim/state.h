// Generated by gencpp from file segway_sim/state.msg
// DO NOT EDIT!


#ifndef SEGWAY_SIM_MESSAGE_STATE_H
#define SEGWAY_SIM_MESSAGE_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace segway_sim
{
template <class ContainerAllocator>
struct state_
{
  typedef state_<ContainerAllocator> Type;

  state_()
    : status(0)
    , header()
    , time(0.0)
    , x(0.0)
    , y(0.0)
    , theta(0.0)
    , v(0.0)
    , thetaDot(0.0)
    , psi(0.0)
    , psiDot(0.0)
    , stateVec()  {
      stateVec.assign(0.0);
  }
  state_(const ContainerAllocator& _alloc)
    : status(0)
    , header(_alloc)
    , time(0.0)
    , x(0.0)
    , y(0.0)
    , theta(0.0)
    , v(0.0)
    , thetaDot(0.0)
    , psi(0.0)
    , psiDot(0.0)
    , stateVec()  {
  (void)_alloc;
      stateVec.assign(0.0);
  }



   typedef uint8_t _status_type;
  _status_type status;

   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _time_type;
  _time_type time;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _theta_type;
  _theta_type theta;

   typedef double _v_type;
  _v_type v;

   typedef double _thetaDot_type;
  _thetaDot_type thetaDot;

   typedef double _psi_type;
  _psi_type psi;

   typedef double _psiDot_type;
  _psiDot_type psiDot;

   typedef boost::array<double, 7>  _stateVec_type;
  _stateVec_type stateVec;





  typedef boost::shared_ptr< ::segway_sim::state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::segway_sim::state_<ContainerAllocator> const> ConstPtr;

}; // struct state_

typedef ::segway_sim::state_<std::allocator<void> > state;

typedef boost::shared_ptr< ::segway_sim::state > statePtr;
typedef boost::shared_ptr< ::segway_sim::state const> stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::segway_sim::state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::segway_sim::state_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::segway_sim::state_<ContainerAllocator1> & lhs, const ::segway_sim::state_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.header == rhs.header &&
    lhs.time == rhs.time &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.theta == rhs.theta &&
    lhs.v == rhs.v &&
    lhs.thetaDot == rhs.thetaDot &&
    lhs.psi == rhs.psi &&
    lhs.psiDot == rhs.psiDot &&
    lhs.stateVec == rhs.stateVec;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::segway_sim::state_<ContainerAllocator1> & lhs, const ::segway_sim::state_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace segway_sim

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::segway_sim::state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::segway_sim::state_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_sim::state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_sim::state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_sim::state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_sim::state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::segway_sim::state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6b60dcbd240a7165577e64ea8154367d";
  }

  static const char* value(const ::segway_sim::state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6b60dcbd240a7165ULL;
  static const uint64_t static_value2 = 0x577e64ea8154367dULL;
};

template<class ContainerAllocator>
struct DataType< ::segway_sim::state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "segway_sim/state";
  }

  static const char* value(const ::segway_sim::state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::segway_sim::state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 status\n"
"Header header\n"
"float64 time\n"
"float64 x\n"
"float64 y\n"
"float64 theta\n"
"float64 v\n"
"float64 thetaDot\n"
"float64 psi\n"
"float64 psiDot\n"
"float64[7] stateVec\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::segway_sim::state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::segway_sim::state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.header);
      stream.next(m.time);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.theta);
      stream.next(m.v);
      stream.next(m.thetaDot);
      stream.next(m.psi);
      stream.next(m.psiDot);
      stream.next(m.stateVec);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::segway_sim::state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::segway_sim::state_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
    s << indent << "v: ";
    Printer<double>::stream(s, indent + "  ", v.v);
    s << indent << "thetaDot: ";
    Printer<double>::stream(s, indent + "  ", v.thetaDot);
    s << indent << "psi: ";
    Printer<double>::stream(s, indent + "  ", v.psi);
    s << indent << "psiDot: ";
    Printer<double>::stream(s, indent + "  ", v.psiDot);
    s << indent << "stateVec[]" << std::endl;
    for (size_t i = 0; i < v.stateVec.size(); ++i)
    {
      s << indent << "  stateVec[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.stateVec[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEGWAY_SIM_MESSAGE_STATE_H
