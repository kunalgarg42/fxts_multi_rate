// Generated by gencpp from file segway_sim/stateDrone.msg
// DO NOT EDIT!


#ifndef SEGWAY_SIM_MESSAGE_STATEDRONE_H
#define SEGWAY_SIM_MESSAGE_STATEDRONE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace segway_sim
{
template <class ContainerAllocator>
struct stateDrone_
{
  typedef stateDrone_<ContainerAllocator> Type;

  stateDrone_()
    : status(0)
    , header()
    , time(0.0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , qw(0.0)
    , qx(0.0)
    , qy(0.0)
    , qz(0.0)
    , vbx(0.0)
    , vby(0.0)
    , vbz(0.0)
    , omegax(0.0)
    , omegay(0.0)
    , omegaz(0.0)
    , omega1(0.0)
    , omega2(0.0)
    , omega3(0.0)
    , omega4(0.0)
    , vx(0.0)
    , vy(0.0)
    , vz(0.0)  {
    }
  stateDrone_(const ContainerAllocator& _alloc)
    : status(0)
    , header(_alloc)
    , time(0.0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , qw(0.0)
    , qx(0.0)
    , qy(0.0)
    , qz(0.0)
    , vbx(0.0)
    , vby(0.0)
    , vbz(0.0)
    , omegax(0.0)
    , omegay(0.0)
    , omegaz(0.0)
    , omega1(0.0)
    , omega2(0.0)
    , omega3(0.0)
    , omega4(0.0)
    , vx(0.0)
    , vy(0.0)
    , vz(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _status_type;
  _status_type status;

   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _time_type;
  _time_type time;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _qw_type;
  _qw_type qw;

   typedef double _qx_type;
  _qx_type qx;

   typedef double _qy_type;
  _qy_type qy;

   typedef double _qz_type;
  _qz_type qz;

   typedef double _vbx_type;
  _vbx_type vbx;

   typedef double _vby_type;
  _vby_type vby;

   typedef double _vbz_type;
  _vbz_type vbz;

   typedef double _omegax_type;
  _omegax_type omegax;

   typedef double _omegay_type;
  _omegay_type omegay;

   typedef double _omegaz_type;
  _omegaz_type omegaz;

   typedef double _omega1_type;
  _omega1_type omega1;

   typedef double _omega2_type;
  _omega2_type omega2;

   typedef double _omega3_type;
  _omega3_type omega3;

   typedef double _omega4_type;
  _omega4_type omega4;

   typedef double _vx_type;
  _vx_type vx;

   typedef double _vy_type;
  _vy_type vy;

   typedef double _vz_type;
  _vz_type vz;





  typedef boost::shared_ptr< ::segway_sim::stateDrone_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::segway_sim::stateDrone_<ContainerAllocator> const> ConstPtr;

}; // struct stateDrone_

typedef ::segway_sim::stateDrone_<std::allocator<void> > stateDrone;

typedef boost::shared_ptr< ::segway_sim::stateDrone > stateDronePtr;
typedef boost::shared_ptr< ::segway_sim::stateDrone const> stateDroneConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::segway_sim::stateDrone_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::segway_sim::stateDrone_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::segway_sim::stateDrone_<ContainerAllocator1> & lhs, const ::segway_sim::stateDrone_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.header == rhs.header &&
    lhs.time == rhs.time &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.qw == rhs.qw &&
    lhs.qx == rhs.qx &&
    lhs.qy == rhs.qy &&
    lhs.qz == rhs.qz &&
    lhs.vbx == rhs.vbx &&
    lhs.vby == rhs.vby &&
    lhs.vbz == rhs.vbz &&
    lhs.omegax == rhs.omegax &&
    lhs.omegay == rhs.omegay &&
    lhs.omegaz == rhs.omegaz &&
    lhs.omega1 == rhs.omega1 &&
    lhs.omega2 == rhs.omega2 &&
    lhs.omega3 == rhs.omega3 &&
    lhs.omega4 == rhs.omega4 &&
    lhs.vx == rhs.vx &&
    lhs.vy == rhs.vy &&
    lhs.vz == rhs.vz;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::segway_sim::stateDrone_<ContainerAllocator1> & lhs, const ::segway_sim::stateDrone_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace segway_sim

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::segway_sim::stateDrone_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::segway_sim::stateDrone_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_sim::stateDrone_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_sim::stateDrone_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_sim::stateDrone_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_sim::stateDrone_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::segway_sim::stateDrone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0a4896036143d2c9c95e36620834c63e";
  }

  static const char* value(const ::segway_sim::stateDrone_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0a4896036143d2c9ULL;
  static const uint64_t static_value2 = 0xc95e36620834c63eULL;
};

template<class ContainerAllocator>
struct DataType< ::segway_sim::stateDrone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "segway_sim/stateDrone";
  }

  static const char* value(const ::segway_sim::stateDrone_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::segway_sim::stateDrone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 status\n"
"Header header\n"
"float64 time\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 qw\n"
"float64 qx\n"
"float64 qy\n"
"float64 qz\n"
"float64 vbx\n"
"float64 vby\n"
"float64 vbz\n"
"float64 omegax\n"
"float64 omegay\n"
"float64 omegaz\n"
"float64 omega1\n"
"float64 omega2\n"
"float64 omega3\n"
"float64 omega4\n"
"float64 vx\n"
"float64 vy\n"
"float64 vz\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::segway_sim::stateDrone_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::segway_sim::stateDrone_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.header);
      stream.next(m.time);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.qw);
      stream.next(m.qx);
      stream.next(m.qy);
      stream.next(m.qz);
      stream.next(m.vbx);
      stream.next(m.vby);
      stream.next(m.vbz);
      stream.next(m.omegax);
      stream.next(m.omegay);
      stream.next(m.omegaz);
      stream.next(m.omega1);
      stream.next(m.omega2);
      stream.next(m.omega3);
      stream.next(m.omega4);
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.vz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct stateDrone_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::segway_sim::stateDrone_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::segway_sim::stateDrone_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "qw: ";
    Printer<double>::stream(s, indent + "  ", v.qw);
    s << indent << "qx: ";
    Printer<double>::stream(s, indent + "  ", v.qx);
    s << indent << "qy: ";
    Printer<double>::stream(s, indent + "  ", v.qy);
    s << indent << "qz: ";
    Printer<double>::stream(s, indent + "  ", v.qz);
    s << indent << "vbx: ";
    Printer<double>::stream(s, indent + "  ", v.vbx);
    s << indent << "vby: ";
    Printer<double>::stream(s, indent + "  ", v.vby);
    s << indent << "vbz: ";
    Printer<double>::stream(s, indent + "  ", v.vbz);
    s << indent << "omegax: ";
    Printer<double>::stream(s, indent + "  ", v.omegax);
    s << indent << "omegay: ";
    Printer<double>::stream(s, indent + "  ", v.omegay);
    s << indent << "omegaz: ";
    Printer<double>::stream(s, indent + "  ", v.omegaz);
    s << indent << "omega1: ";
    Printer<double>::stream(s, indent + "  ", v.omega1);
    s << indent << "omega2: ";
    Printer<double>::stream(s, indent + "  ", v.omega2);
    s << indent << "omega3: ";
    Printer<double>::stream(s, indent + "  ", v.omega3);
    s << indent << "omega4: ";
    Printer<double>::stream(s, indent + "  ", v.omega4);
    s << indent << "vx: ";
    Printer<double>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<double>::stream(s, indent + "  ", v.vy);
    s << indent << "vz: ";
    Printer<double>::stream(s, indent + "  ", v.vz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEGWAY_SIM_MESSAGE_STATEDRONE_H
